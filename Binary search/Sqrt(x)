class Solution {
public:
    int mySqrt(int x) {
        if (x == 0 || x == 1)
    {
        return x;
    }
    int start = 1, end = x / 2;
    // standard binary search template
    while (start + 1 < end)
    {
        int mid = start + (end - start) / 2;
        // why not mid * mid <= x? because it may cause overflow when mid is very large
        if (mid <= x / mid)
        {
            start = mid;
        }
        else
        {
            end = mid - 1;
        }
    }
    return end <= x / end ? end : start;
    }
};
